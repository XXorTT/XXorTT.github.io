[{"title":"Maven","path":"/2024/08/02/maven/","content":"1.Maven简介&#x3D;&#x3D;Maven是一个依赖管理工具&#x3D;&#x3D;Maven是一款为 Java 项目管理构建、依赖管理的工具（软件），使用 Maven 可以自动化构建、测试、打包和发布项目，大大提高了开发效率和质量。Maven就是一个软件，掌握安装、配置、以及基本功能 （项目构建、依赖管理） 的理解和使用即可~ 2.Maven的引入①jar包：&emsp;&emsp;jar包就是 &#x3D;&#x3D;Java Archive File&#x3D;&#x3D;，是 Java 的一种文档格式，是一种与平台无关的文件格式，可将多个文件合成一个“文件”。jar 包与 zip 包非常相似——准确地说，它就是 zip 包，所以叫它文件包。&emsp;&emsp;jar 与 zip 唯一的区别就是在 jar 文件的内容中，包含了一个 META-INF&#x2F;MANIFEST.MF 文件，该文件是在生成 jar 文件的时候自动创建的，作为jar里面的”详情单”，包含了该Jar包的版本、创建人和类搜索路径Class-Path等信息。&emsp;&emsp;随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，一个模块里面用到上百个jar包是非常正常的。如果一个简单的项目就需要上百个文件导入后才能运行这无疑让人感到头大。这时就需要一个工具来管理…… &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;懒惰使人类进步 &emsp;&emsp;如果使用 Maven 来引入这些 jar 包只需要配置几个『依赖』 ②jar包的来源问题 这个jar包所属技术的官网。官网通常是英文界面，网站的结构又不尽相同，甚至找到下载链接还发现需要通过特殊的工具下载。 第三方网站提供下载。问题是不规范，在使用过程中会出现各种问题。 jar包的名称 jar包的版本 jar包内的具体细节 而使用 Maven 后，依赖对应的 jar 包能够自动下载，方便、快捷又规范。 ③jar包的导入问题在web工程中，jar包必须存放在指定位置： 在使用Maven之后，通过配置依赖(jar包)的坐标，查找本地仓库中相应jar包，若本地仓库没有，则统一从镜像网站或中央仓库中下载： ④jar包之间的依赖&emsp;&emsp;框架中使用的 jar 包，不仅数量庞大，而且彼此之间存在错综复杂的依赖关系。依赖关系的复杂程度，已经上升到了完全不能靠人力手动解决的程度。另外，jar 包之间有可能产生冲突。进一步增加了我们在 jar 包使用过程中的难度。&emsp;&emsp;而实际上 jar 包之间的依赖关系是普遍存在的，如果要由程序员手动梳理无疑会增加极高的学习成本，而这些工作又对实现业务功能毫无帮助。&emsp;&emsp;而使用 Maven 则几乎不需要管理这些关系，极个别的地方调整一下即可，极大的减轻了我们的工作量。 3.基于IDEA 进行Maven依赖管理3.1 依赖管理概念Maven 依赖管理是 Maven 软件中最重要的功能之一。Maven 的依赖管理能够帮助开发人员自动解决软件包依赖问题，使得开发人员能够轻松地将其他开发人员开发的模块或第三方框架集成到自己的应用程序或模块中，避免出现版本冲突和依赖缺失等问题。 我们通过定义 POM 文件，Maven 能够自动解析项目的依赖关系，并通过 Maven 仓库自动下载和管理依赖，从而避免了手动下载和管理依赖的繁琐工作和可能引发的版本冲突问题。 总之，Maven 的依赖管理是 Maven 软件的一个核心功能之一，使得软件包依赖的管理和使用更加智能和方便，简化了开发过程中的工作，并提高了软件质量和可维护性。 3.2 Maven工程核心信息配置和解读（GAVP）位置：pom.xml 12345678910111213141516&lt;!-- 模型版本 --&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;&lt;groupId&gt;com.companyname.project-group&lt;/groupId&gt;&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;&lt;artifactId&gt;project&lt;/artifactId&gt;&lt;!-- 版本号 --&gt;&lt;version&gt;1.0.0&lt;/version&gt;&lt;!--打包方式 默认：jar jar指的是普通的java项目打包方式！ 项目打成jar包！ war指的是web项目打包方式！项目打成war包！ pom不会讲项目打包！这个项目作为父工程，被其他工程聚合或者继承！后面会讲解两个概念--&gt;&lt;packaging&gt;jar/pom/war&lt;/packaging&gt; 3.3 Maven工程依赖管理配置位置：pom.xml 依赖管理和依赖添加 123456789101112131415161718&lt;!-- 通过编写依赖jar包的gav必要属性，引入第三方依赖！ scope属性是可选的，可以指定依赖生效范围！ 依赖信息查询方式： 1. maven仓库信息官网 https://mvnrepository.com/ 2. mavensearch插件搜索 --&gt;&lt;dependencies&gt; &lt;!-- 引入具体的依赖包 --&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.17&lt;/version&gt; &lt;!-- 依赖范围 --&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 依赖版本统一提取和维护 1234567891011121314151617&lt;!--声明版本--&gt;&lt;properties&gt; &lt;!--命名随便,内部制定版本号即可！--&gt; &lt;junit.version&gt;4.12&lt;/junit.version&gt; &lt;!-- 也可以通过 maven规定的固定的key，配置maven的参数！如下配置编码格式！--&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;&lt;/properties&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;!--引用properties声明版本 --&gt; &lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 3.4 依赖范围通过设置坐标的依赖范围(scope)，可以设置 对应jar包的作用范围：编译环境、测试环境、运行环境 依赖范围 描述 compile 编译依赖范围，scope 元素的缺省值。使用此依赖范围的 Maven 依赖，对于三种 classpath 均有效，即该 Maven 依赖在上述三种 classpath 均会被引入。例如，log4j 在编译、测试、运行过程都是必须的。 test 测试依赖范围。使用此依赖范围的 Maven 依赖，只对测试 classpath 有效。例如，Junit 依赖只有在测试阶段才需要。 provided 已提供依赖范围。使用此依赖范围的 Maven 依赖，只对编译 classpath 和测试 classpath 有效。例如，servlet-api 依赖对于编译、测试阶段而言是需要的，但是运行阶段，由于外部容器已经提供，故不需要 Maven 重复引入该依赖。 runtime 运行时依赖范围。使用此依赖范围的 Maven 依赖，只对测试 classpath、运行 classpath 有效。例如，JDBC 驱动实现依赖，其在编译时只需 JDK 提供的 JDBC 接口即可，只有测试、运行阶段才需要实现了 JDBC 接口的驱动。 system 系统依赖范围，其效果与 provided 的依赖范围一致。其用于添加非 Maven 仓库的本地依赖，通过依赖元素 dependency 中的 systemPath 元素指定本地依赖的路径。鉴于使用其会导致项目的可移植性降低，一般不推荐使用。 import 导入依赖范围，该依赖范围只能与 dependencyManagement 元素配合使用，其功能是将目标 pom.xml 文件中 dependencyManagement 的配置导入合并到当前 pom.xml 的 dependencyManagement 中。 本篇知识回顾参考尚硅谷的文章，仅作为复习or快速入门使用。","tags":["Java"],"categories":["Java"]},{"title":"md入门","path":"/2024/07/18/md入门/","content":"MarkDown学习笔记[TOC] 0.前言话说md的优秀学习资源还真不好找，在小破站找了半天，还是在Github发现了宝藏https://github.com/Sakiyary/Markdown-Typora-VSCode-Doc 1.标题[数个“#”+空格前置]一级标题二级标题三级标题四级标题五级标题六级标题标题会在目录与大纲分级显示，可以跳转。 在 Typora 中建议开启严格模式，即不应为#标题，应为# 标题。 应该手动补上空格，使得Markdown语法在其他文本编辑器上兼容。 2. 强调 [用 “**” 或 “__” 包围]欢迎报考南京大学! (我喜欢用这种)欢迎报考南京大学!或者选中想要强调的文字按Ctrl+ B。 例如 欢迎报考南京大学！ 3. 斜体 [用 “*” 或 “_” 包围]欢迎大佬来浇浇我各种知识 (我喜欢用这种)欢迎大佬来浇浇我各种知识或者选中想要强调的文字按Ctrl+ I。 例如 欢迎大佬来浇我各种知识 (PS斜体并强调[用“***”或“___”包围]) 4. 删除线 [用 “~~” 包围]我宣布个事儿, 我是Sabiyary!例如 5. *高亮 [用“&#x3D;&#x3D;”包围](注意：此为扩展语法) &#x3D;&#x3D;我喜欢黄色, 也喜欢绿色&#x3D;&#x3D;例如 &#x3D;&#x3D;我喜欢黄色，也喜欢绿色&#x3D;&#x3D; 6. 代码 [用 “&#96;” 包围]sudo rm -rf /* 例如 sudo rm -rf &#x2F;*（没事别乱敲这个！） “请输入管理员密码: (点亮的指示灯)” 7. 代码块 [按三个“&#96;”并敲回车]1234567891011// 这里就可以开始输入你要的代码了#include &lt;stdio.h&gt;int mian() &#123; print（“Hello, world! &quot;）; retrun O;&#125; // (这三个&quot;`&quot;文本编辑器会帮你自动补全 一般不用手动输)（我之前都是用这个来展示各种语法的，应该不用说明清楚吧）显示行数的话，一般要在 Typora 的设置里勾上这个显示行数的选项。代码块里可以选择语言，其会根据语言自动高亮各个语句。 在选择语言后，```会变为````+ 对应语言。 8. 引用[“&gt;” + 空格前置] 24岁, 是学生. 学生特有的无处不在(恼)引用是可以的！ 9. 无序列表 [“-“ 或 “+” + 空格前置] 一颗是枣树 (我喜欢用这种) 另一颗还是枣树 (其实这种也可以, 不过由于在 Typora 中很难单个输入, 故不常用)三个前置符都可以，敲回车会自动补全，可以在Typora设置中调整补全的符号，敲回车后按下Tab会缩进一级。 10. 社区列表【数字+“.” + 空格前置]我来这里就为了三件事: 公平 公平 还是tm的公平!敲回车会自动补全，敲回车后按下Tab会缩进一级。 11. *上标 [用 “^” 包围](注意：此为扩展语法) C语言中int的上限是 2^31^ - 1 &#x3D; 2147483647 12. *下标 [用 “~” 包围](注意：此为扩展语法) H2O 是剧毒的!例如 H2哦是剧毒的！ 13. *注释 [“[^]” 后置](注意：此为扩展语法) 今日我们相聚于此, 是为了学习 Markdown 的使用, 它的教程对于全体「观众」而言, 值得足足两个硬币的支持鼓励![^1] [^1]: 沃兹·基·硕德 改编自「公鸡」普契涅拉.需要在文末写上注释的内容 14. 链接 [常用 “[ ]” + “( )” 分别包围文本与链接]（注意：文内动画作为扩展方式） 来看看原作者的仓库罢[基础教程: 12. 下标](#12. 下标 [用 “~” 包围])支持网页链接与文内跳转，按住Ctrl并单击鼠标左键即可跳转。 15.任务列表[“-[]”+空格前置]TodoList: 刷B站 写代码 起床使用x替换[ ]中的空格来勾选任务列表。 在 Typora&#x2F;VScode 中可以直接用鼠标左键单击复选框。 16. 表格 [用“|” 相似表格相似] 学号 姓名 年龄 114514 田所 24 1919810 浩三 25 (引号的位置代表着 左对齐, 居中, 右对齐) 第一行为表头，并由第二行分割线决定景观方式与长度，第三行及之后即表格数据 17. 图片 [直接拖板进来或者复制粘贴]我还是会选择拖板或者复制粘贴啦~在Typora的设置里也可以改变图片的存储方式。 18.分割线[按三个“*”或“-”或“_”并敲回车] — (我喜欢用这种) &#x2F;&#x2F; (其实按三个及以上都可以)由于*与_均会自动补全，所以我觉得-极其方便。 19. Emoji表情 [“:” 前面]（注意：英文输入为扩展语法） :sweat_smile::drooling_face::clown_face:&#x2F;&#x2F; (敲回车或者鼠标点击, 后置的”:”一般不需要手动输)这个功能的唯一要求就是英语水平要高，或者大概记住各个表情符号的英文名字。 对于其余普通的 Markdown 文本编辑器，可以直接将 Emoji 表情复制进来，这就是直接硬编码的 (刻进DNA里） 例如 😅🤤🤡 使用好这个功能可以让你的文本非常可爱！太抽象了 进阶1. 目录 [自动生成]&#x3D;&#x3D;[TOC]&#x3D;&#x3D;(此为 Typora 特有的, 如本文档开头)若使用 VS Code 且搭配 Markdown All in One 扩展，可在 VS Code 的命令面板（即VS Code Command Palette）输入Create Table of Contents自动生成目录，可在扩展中设置中细调目录参数。 2. 内联 HTML 代码 [用 “&lt;&gt; &lt;&#x2F;&gt;” 包围] 我不会 HTML 呜呜呜... 浇浇我 简单的文字居中也可以这样 我差点忘了还有下划线这东西…只要你会写，你完全可以把 Markdown 当作HTML来写。 同时，.md文件可以直接导出成一个网页。 下划线可以选中想要下划的文字单击Ctrl+ U。 3. 内联公式 [用 “$” 包围]（注意：部分编译器会不识别部分符号） $\\LaTeX$ 是最好用的论文排版语言! 不信你看! $a^n+b^n&#x3D;c^n$ 使用$包围为单条公式，点击两个$并敲回车即生成公式块。 例如 是最好用的论文排版语言！ 不信你看！ 4. *网络图表（这是学长给我的网络图床教程，我实践过……） 分享一个Typora搭配腾讯云COS&#x2F;阿里云OSS图床的例子。 新免费用户投入了6个月的时间，另外选择了七牛云或者路过图床。 5. *Typora 的常用快捷键關鍵\t效果\t關鍵\t效果Ctrl+D\t选中当前词\tCtrl+L\t选中当前句&#x2F;行Ctrl+E\t选中当前项目\tCtrl+F\t搜索当前问题Ctrl+B\t加粗当前检查\tCtrl+H\t替换当前选项Ctrl+I\t总统当前任务\tCtrl+U\t下划当前检查Ctrl+K\t将当前选中生成链接\tCtrl+J\t屏幕滚动至顶部Ctrl+W\t关闭窗口\tCtrl+N\t打开新窗口Ctrl+O\t打开文件\tCtrl+P\t搜索结果并打开Ctrl+回车\t表格下方插入行\tCtrl+,\t展开方案Ctrl+.\t切换全角&#x2F;半角标点\tCtrl+&#x2F;\t切换正常&#x2F;来源视图Ctrl+ Shift+-\t幻灯片\tCtrl+ Shift++\t放大还有一些不常用的&#x2F;三键的主板不在此首发。 6. *Typora的主题风格与检查元素Markdown 在编译后相当于 HTML。 而Typora的正常视图就是编译Markdown后的，故Typora的主题样式本质上就是CSS文件。 可以下载各种好看的主题给Typora换上，同时也可以自己调整对应的CSS文件，或者自己手搓。 在Typora中打开调试模式后即可在正常视图右击打开检查元素，在其中就可以完全将Markdown文件当成HTML来编辑。 💯 总结至此，Markdown + Typora &#x2F; VSCode的手册教程也告一段落。 不知道你看完这么长的教程&#x2F;手册，是否能体会到 Markdown 的精妙简洁之处呢？ 其实 Markdown 只是标记语言的最开始，我的感受是会了 Markdown 之后对于理解 HTML 也有帮助，对于使用Latex来写论文也有帮助。 语言标记是为了修复Word那样虽然“所见即所得”，但又过度花哨浮华，很差的兼容性与闭源的编码的缺陷。 当你能够掌握这样的“所写即所得”时，你肯定会常用 Markdown 这类语言来处理文本的妙处！","tags":["MD"],"categories":["blog1"]},{"title":"Hello World","path":"/2024/07/18/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]